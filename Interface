// Interface is a keyword used to achieve total Abstraction.
// It supports multiple inheritance.
// Class to Class ----> Extends
// Inteface to Interface ----> Extends 
// Interface to Class ----> Implements
// By default all the method are "PUBLIC and ABSTRACT" in Interface.
// By default all the variables are "FINAL & STATIC" in Interface.

interface Animal {

    int ageOfAnimal = 1;// By default all the variables are "FINAL & STATIC" in Interface so, we have to assign the value.
    String nickName ="Sonu";

    void Bark(); // By default all the method are "PUBLIC and ABSTRACT" in Interface so, we don't need to write again.
    void Eat(); 
}

class Cat implements Animal 
{
    public void Bark()  // We have to define the parent method here as these are type of abstract.
    {
        System.out.println("Mew Mew");
    }
    public void Eat()
    {
        System.out.println("Fish");
    }
}

public class Interface {
    public static void main(String[] args) {
        //Animal ob = new Animal(); // We can not create Object of Interface as it is of abstract type
        Animal ob = new Cat(); // We can create reference of interface. 
        ob.Bark();
        ob.Eat();

        //ob.nickName;  // We can't call using object as the variables are static type and static type never allow to create object.

        Animal.ageOfAnimal; // We can call using Interface only.
        Animal.nickName;
    }
}

